1. vector design
functions:
vector_init - initialize the vector
vector_destroy - destroy vector
vector_at - return the pointer to i'th element
vector_front - return the pointer to first element
vector_back - return the pointer to last element
vector_append - add element to end
vector_size - return the size of vector
vector_empty - return the vector is empty
vector_capacity - return the capacity
vector_insert - insert to vector at i
vector_clear - remove all elements in vector
vector_delete - delete element at position i
vector_replace - replace element at position i
vector_reserve - reserve place for element

2. flist degisn
functions:
flist_init - initialize the flist
flist_destroy - destroy flist
flist_front - access the first element
flist_empty - checks whether the container is empty
flist_push_front - inserts element to the beginning
flist_pop_front - removes the first element
flist_reverse - reverses the order of the elements

3. stack design
functions:
stack_init - initialize the stack
stack_destroy - destroy the stack
stack_top - access the top element
stack_empty - checks whether the container is empty
stack_size - returns the number of elements
stack_push - inserts element at the top
stack_pop - removes the top element

4. queue design
functions:
queue_init - initialize the queue
queue_destroy - destroy the queue
queue_front - access the first element
queue_back - access the last element
queue_empty - checks whether the container is empty
queue_size - returns the number of elements
queue_push - inserts element at the end
queue_pop - removes the first element

5. pri_queue design
functions:
pri_queue_init - initialize the queue
pri_queue_destroy - destroy the queue
pri_queue_front - access the first element
pri_queue_back - access the last element
pri_queue_empty - checks whether the container is empty
pri_queue_size - returns the number of elements
pri_queue_push - inserts element at the end
pri_queue_pop - removes the first element

6. hset design
functions:
hset_init - initialize the hset
hset_destroy - destroy the hset
hset_empty - check whether the container is empty
hset_size - return the number of elements
hset_clear - remove all elements
hset_insert - inserts elements
hset_erase - erases element
hset_find - finds element with specific key

7. deque design(double ended queue, without insert and erase)
functions:
deque_init - initialize the deque
deque_destroy - destroy the deque
deque_empty - check whether the container is empty
deque_size - return the number of elements
deque_at - access specified element with bounds checking
deque_front - access the first element
deque_back - access the last element
deque_clear - clears the contents
deque_push_back - inserts elements to the end
deque_pop_back - removes the last element
deque_push_front - inserts elements to the beginning
deque_pop_front - removes the first element
